// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// GenericDB is an autogenerated mock type for the GenericDB type
type GenericDB struct {
	mock.Mock
}

// Connect provides a mock function with given fields:
func (_m *GenericDB) Connect() {
	_m.Called()
}

// Delete provides a mock function with given fields: entity, id
func (_m *GenericDB) Delete(entity interface{}, id string) (interface{}, error) {
	ret := _m.Called(entity, id)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(interface{}, string) interface{}); ok {
		r0 = rf(entity, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}, string) error); ok {
		r1 = rf(entity, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: id, entity, preload
func (_m *GenericDB) Get(id string, entity interface{}, preload ...string) (bool, error) {
	_va := make([]interface{}, len(preload))
	for _i := range preload {
		_va[_i] = preload[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, id, entity)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, interface{}, ...string) bool); ok {
		r0 = rf(id, entity, preload...)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, interface{}, ...string) error); ok {
		r1 = rf(id, entity, preload...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: entity
func (_m *GenericDB) GetAll(entity interface{}) error {
	ret := _m.Called(entity)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(entity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Insert provides a mock function with given fields: entity
func (_m *GenericDB) Insert(entity interface{}) (interface{}, error) {
	ret := _m.Called(entity)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(interface{}) interface{}); ok {
		r0 = rf(entity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}) error); ok {
		r1 = rf(entity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: entity
func (_m *GenericDB) Update(entity interface{}) (interface{}, error) {
	ret := _m.Called(entity)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(interface{}) interface{}); ok {
		r0 = rf(entity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}) error); ok {
		r1 = rf(entity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
